// Code generated by protoc-gen-gogo.
// source: proto/bandit.proto
// DO NOT EDIT!

/*
	Package bandit is a generated protocol buffer package.

	It is generated from these files:
		proto/bandit.proto

	It has these top-level messages:
		Experiment
		GetExperimentsRequest
		GetExperimentsResponse
		GetExperimentRequest
		GetExperimentResponse
		PostExperimentRequest
		PostExperimentResponse
		DeleteExperimentRequest
		DeleteExperimentResponse
		GetArmRequest
		GetArmResponse
		UpdateArmRequest
		UpdateArmResponse
*/
package bandit

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Experiment struct {
	Id          string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt   string    `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   string    `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name        string    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description string    `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	N           int64     `protobuf:"varint,6,opt,name=n,proto3" json:"n,omitempty"`
	Epsilon     float64   `protobuf:"fixed64,7,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	Features    []string  `protobuf:"bytes,8,rep,name=features" json:"features,omitempty"`
	Counts      []int64   `protobuf:"varint,9,rep,packed,name=counts" json:"counts,omitempty"`
	Rewards     []float64 `protobuf:"fixed64,10,rep,packed,name=rewards" json:"rewards,omitempty"`
}

func (m *Experiment) Reset()                    { *m = Experiment{} }
func (m *Experiment) String() string            { return proto.CompactTextString(m) }
func (*Experiment) ProtoMessage()               {}
func (*Experiment) Descriptor() ([]byte, []int) { return fileDescriptorBandit, []int{0} }

func (m *Experiment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Experiment) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Experiment) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Experiment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Experiment) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Experiment) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *Experiment) GetEpsilon() float64 {
	if m != nil {
		return m.Epsilon
	}
	return 0
}

func (m *Experiment) GetFeatures() []string {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *Experiment) GetCounts() []int64 {
	if m != nil {
		return m.Counts
	}
	return nil
}

func (m *Experiment) GetRewards() []float64 {
	if m != nil {
		return m.Rewards
	}
	return nil
}

type GetExperimentsRequest struct {
}

func (m *GetExperimentsRequest) Reset()                    { *m = GetExperimentsRequest{} }
func (m *GetExperimentsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetExperimentsRequest) ProtoMessage()               {}
func (*GetExperimentsRequest) Descriptor() ([]byte, []int) { return fileDescriptorBandit, []int{1} }

type GetExperimentsResponse struct {
	Data  []*Experiment `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	Count int64         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *GetExperimentsResponse) Reset()                    { *m = GetExperimentsResponse{} }
func (m *GetExperimentsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetExperimentsResponse) ProtoMessage()               {}
func (*GetExperimentsResponse) Descriptor() ([]byte, []int) { return fileDescriptorBandit, []int{2} }

func (m *GetExperimentsResponse) GetData() []*Experiment {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetExperimentsResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetExperimentRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetExperimentRequest) Reset()                    { *m = GetExperimentRequest{} }
func (m *GetExperimentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetExperimentRequest) ProtoMessage()               {}
func (*GetExperimentRequest) Descriptor() ([]byte, []int) { return fileDescriptorBandit, []int{3} }

func (m *GetExperimentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetExperimentResponse struct {
	Data *Experiment `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *GetExperimentResponse) Reset()                    { *m = GetExperimentResponse{} }
func (m *GetExperimentResponse) String() string            { return proto.CompactTextString(m) }
func (*GetExperimentResponse) ProtoMessage()               {}
func (*GetExperimentResponse) Descriptor() ([]byte, []int) { return fileDescriptorBandit, []int{4} }

func (m *GetExperimentResponse) GetData() *Experiment {
	if m != nil {
		return m.Data
	}
	return nil
}

type PostExperimentRequest struct {
	Data *Experiment `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *PostExperimentRequest) Reset()                    { *m = PostExperimentRequest{} }
func (m *PostExperimentRequest) String() string            { return proto.CompactTextString(m) }
func (*PostExperimentRequest) ProtoMessage()               {}
func (*PostExperimentRequest) Descriptor() ([]byte, []int) { return fileDescriptorBandit, []int{5} }

func (m *PostExperimentRequest) GetData() *Experiment {
	if m != nil {
		return m.Data
	}
	return nil
}

type PostExperimentResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PostExperimentResponse) Reset()                    { *m = PostExperimentResponse{} }
func (m *PostExperimentResponse) String() string            { return proto.CompactTextString(m) }
func (*PostExperimentResponse) ProtoMessage()               {}
func (*PostExperimentResponse) Descriptor() ([]byte, []int) { return fileDescriptorBandit, []int{6} }

func (m *PostExperimentResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteExperimentRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteExperimentRequest) Reset()                    { *m = DeleteExperimentRequest{} }
func (m *DeleteExperimentRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteExperimentRequest) ProtoMessage()               {}
func (*DeleteExperimentRequest) Descriptor() ([]byte, []int) { return fileDescriptorBandit, []int{7} }

func (m *DeleteExperimentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteExperimentResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *DeleteExperimentResponse) Reset()                    { *m = DeleteExperimentResponse{} }
func (m *DeleteExperimentResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteExperimentResponse) ProtoMessage()               {}
func (*DeleteExperimentResponse) Descriptor() ([]byte, []int) { return fileDescriptorBandit, []int{8} }

func (m *DeleteExperimentResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type GetArmRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetArmRequest) Reset()                    { *m = GetArmRequest{} }
func (m *GetArmRequest) String() string            { return proto.CompactTextString(m) }
func (*GetArmRequest) ProtoMessage()               {}
func (*GetArmRequest) Descriptor() ([]byte, []int) { return fileDescriptorBandit, []int{9} }

func (m *GetArmRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetArmResponse struct {
	Arm int64 `protobuf:"varint,1,opt,name=arm,proto3" json:"arm,omitempty"`
}

func (m *GetArmResponse) Reset()                    { *m = GetArmResponse{} }
func (m *GetArmResponse) String() string            { return proto.CompactTextString(m) }
func (*GetArmResponse) ProtoMessage()               {}
func (*GetArmResponse) Descriptor() ([]byte, []int) { return fileDescriptorBandit, []int{10} }

func (m *GetArmResponse) GetArm() int64 {
	if m != nil {
		return m.Arm
	}
	return 0
}

type UpdateArmRequest struct {
	Id     string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Arm    int64   `protobuf:"varint,2,opt,name=arm,proto3" json:"arm,omitempty"`
	Reward float32 `protobuf:"fixed32,3,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (m *UpdateArmRequest) Reset()                    { *m = UpdateArmRequest{} }
func (m *UpdateArmRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateArmRequest) ProtoMessage()               {}
func (*UpdateArmRequest) Descriptor() ([]byte, []int) { return fileDescriptorBandit, []int{11} }

func (m *UpdateArmRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateArmRequest) GetArm() int64 {
	if m != nil {
		return m.Arm
	}
	return 0
}

func (m *UpdateArmRequest) GetReward() float32 {
	if m != nil {
		return m.Reward
	}
	return 0
}

type UpdateArmResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *UpdateArmResponse) Reset()                    { *m = UpdateArmResponse{} }
func (m *UpdateArmResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateArmResponse) ProtoMessage()               {}
func (*UpdateArmResponse) Descriptor() ([]byte, []int) { return fileDescriptorBandit, []int{12} }

func (m *UpdateArmResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*Experiment)(nil), "bandit.Experiment")
	proto.RegisterType((*GetExperimentsRequest)(nil), "bandit.GetExperimentsRequest")
	proto.RegisterType((*GetExperimentsResponse)(nil), "bandit.GetExperimentsResponse")
	proto.RegisterType((*GetExperimentRequest)(nil), "bandit.GetExperimentRequest")
	proto.RegisterType((*GetExperimentResponse)(nil), "bandit.GetExperimentResponse")
	proto.RegisterType((*PostExperimentRequest)(nil), "bandit.PostExperimentRequest")
	proto.RegisterType((*PostExperimentResponse)(nil), "bandit.PostExperimentResponse")
	proto.RegisterType((*DeleteExperimentRequest)(nil), "bandit.DeleteExperimentRequest")
	proto.RegisterType((*DeleteExperimentResponse)(nil), "bandit.DeleteExperimentResponse")
	proto.RegisterType((*GetArmRequest)(nil), "bandit.GetArmRequest")
	proto.RegisterType((*GetArmResponse)(nil), "bandit.GetArmResponse")
	proto.RegisterType((*UpdateArmRequest)(nil), "bandit.UpdateArmRequest")
	proto.RegisterType((*UpdateArmResponse)(nil), "bandit.UpdateArmResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BanditService service

type BanditServiceClient interface {
	GetExperiments(ctx context.Context, in *GetExperimentsRequest, opts ...grpc.CallOption) (*GetExperimentsResponse, error)
	GetExperiment(ctx context.Context, in *GetExperimentRequest, opts ...grpc.CallOption) (*GetExperimentResponse, error)
	PostExperiment(ctx context.Context, in *PostExperimentRequest, opts ...grpc.CallOption) (*PostExperimentResponse, error)
	DeleteExperiment(ctx context.Context, in *DeleteExperimentRequest, opts ...grpc.CallOption) (*DeleteExperimentResponse, error)
	GetArm(ctx context.Context, in *GetArmRequest, opts ...grpc.CallOption) (*GetArmResponse, error)
	UpdateArm(ctx context.Context, in *UpdateArmRequest, opts ...grpc.CallOption) (*UpdateArmResponse, error)
}

type banditServiceClient struct {
	cc *grpc.ClientConn
}

func NewBanditServiceClient(cc *grpc.ClientConn) BanditServiceClient {
	return &banditServiceClient{cc}
}

func (c *banditServiceClient) GetExperiments(ctx context.Context, in *GetExperimentsRequest, opts ...grpc.CallOption) (*GetExperimentsResponse, error) {
	out := new(GetExperimentsResponse)
	err := grpc.Invoke(ctx, "/bandit.BanditService/GetExperiments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banditServiceClient) GetExperiment(ctx context.Context, in *GetExperimentRequest, opts ...grpc.CallOption) (*GetExperimentResponse, error) {
	out := new(GetExperimentResponse)
	err := grpc.Invoke(ctx, "/bandit.BanditService/GetExperiment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banditServiceClient) PostExperiment(ctx context.Context, in *PostExperimentRequest, opts ...grpc.CallOption) (*PostExperimentResponse, error) {
	out := new(PostExperimentResponse)
	err := grpc.Invoke(ctx, "/bandit.BanditService/PostExperiment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banditServiceClient) DeleteExperiment(ctx context.Context, in *DeleteExperimentRequest, opts ...grpc.CallOption) (*DeleteExperimentResponse, error) {
	out := new(DeleteExperimentResponse)
	err := grpc.Invoke(ctx, "/bandit.BanditService/DeleteExperiment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banditServiceClient) GetArm(ctx context.Context, in *GetArmRequest, opts ...grpc.CallOption) (*GetArmResponse, error) {
	out := new(GetArmResponse)
	err := grpc.Invoke(ctx, "/bandit.BanditService/GetArm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banditServiceClient) UpdateArm(ctx context.Context, in *UpdateArmRequest, opts ...grpc.CallOption) (*UpdateArmResponse, error) {
	out := new(UpdateArmResponse)
	err := grpc.Invoke(ctx, "/bandit.BanditService/UpdateArm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BanditService service

type BanditServiceServer interface {
	GetExperiments(context.Context, *GetExperimentsRequest) (*GetExperimentsResponse, error)
	GetExperiment(context.Context, *GetExperimentRequest) (*GetExperimentResponse, error)
	PostExperiment(context.Context, *PostExperimentRequest) (*PostExperimentResponse, error)
	DeleteExperiment(context.Context, *DeleteExperimentRequest) (*DeleteExperimentResponse, error)
	GetArm(context.Context, *GetArmRequest) (*GetArmResponse, error)
	UpdateArm(context.Context, *UpdateArmRequest) (*UpdateArmResponse, error)
}

func RegisterBanditServiceServer(s *grpc.Server, srv BanditServiceServer) {
	s.RegisterService(&_BanditService_serviceDesc, srv)
}

func _BanditService_GetExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanditServiceServer).GetExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bandit.BanditService/GetExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanditServiceServer).GetExperiments(ctx, req.(*GetExperimentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BanditService_GetExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanditServiceServer).GetExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bandit.BanditService/GetExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanditServiceServer).GetExperiment(ctx, req.(*GetExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BanditService_PostExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanditServiceServer).PostExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bandit.BanditService/PostExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanditServiceServer).PostExperiment(ctx, req.(*PostExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BanditService_DeleteExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanditServiceServer).DeleteExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bandit.BanditService/DeleteExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanditServiceServer).DeleteExperiment(ctx, req.(*DeleteExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BanditService_GetArm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanditServiceServer).GetArm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bandit.BanditService/GetArm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanditServiceServer).GetArm(ctx, req.(*GetArmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BanditService_UpdateArm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanditServiceServer).UpdateArm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bandit.BanditService/UpdateArm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanditServiceServer).UpdateArm(ctx, req.(*UpdateArmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BanditService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bandit.BanditService",
	HandlerType: (*BanditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExperiments",
			Handler:    _BanditService_GetExperiments_Handler,
		},
		{
			MethodName: "GetExperiment",
			Handler:    _BanditService_GetExperiment_Handler,
		},
		{
			MethodName: "PostExperiment",
			Handler:    _BanditService_PostExperiment_Handler,
		},
		{
			MethodName: "DeleteExperiment",
			Handler:    _BanditService_DeleteExperiment_Handler,
		},
		{
			MethodName: "GetArm",
			Handler:    _BanditService_GetArm_Handler,
		},
		{
			MethodName: "UpdateArm",
			Handler:    _BanditService_UpdateArm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bandit.proto",
}

func (m *Experiment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Experiment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBandit(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBandit(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if len(m.UpdatedAt) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBandit(dAtA, i, uint64(len(m.UpdatedAt)))
		i += copy(dAtA[i:], m.UpdatedAt)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBandit(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBandit(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.N != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBandit(dAtA, i, uint64(m.N))
	}
	if m.Epsilon != 0 {
		dAtA[i] = 0x39
		i++
		i = encodeFixed64Bandit(dAtA, i, uint64(math.Float64bits(float64(m.Epsilon))))
	}
	if len(m.Features) > 0 {
		for _, s := range m.Features {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Counts) > 0 {
		dAtA2 := make([]byte, len(m.Counts)*10)
		var j1 int
		for _, num1 := range m.Counts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBandit(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Rewards) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintBandit(dAtA, i, uint64(len(m.Rewards)*8))
		for _, num := range m.Rewards {
			f3 := math.Float64bits(float64(num))
			dAtA[i] = uint8(f3)
			i++
			dAtA[i] = uint8(f3 >> 8)
			i++
			dAtA[i] = uint8(f3 >> 16)
			i++
			dAtA[i] = uint8(f3 >> 24)
			i++
			dAtA[i] = uint8(f3 >> 32)
			i++
			dAtA[i] = uint8(f3 >> 40)
			i++
			dAtA[i] = uint8(f3 >> 48)
			i++
			dAtA[i] = uint8(f3 >> 56)
			i++
		}
	}
	return i, nil
}

func (m *GetExperimentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExperimentsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetExperimentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExperimentsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBandit(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBandit(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *GetExperimentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExperimentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBandit(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *GetExperimentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExperimentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBandit(dAtA, i, uint64(m.Data.Size()))
		n4, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *PostExperimentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostExperimentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBandit(dAtA, i, uint64(m.Data.Size()))
		n5, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *PostExperimentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostExperimentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBandit(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *DeleteExperimentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteExperimentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBandit(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *DeleteExperimentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteExperimentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetArmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArmRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBandit(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *GetArmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArmResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Arm != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBandit(dAtA, i, uint64(m.Arm))
	}
	return i, nil
}

func (m *UpdateArmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateArmRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBandit(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Arm != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBandit(dAtA, i, uint64(m.Arm))
	}
	if m.Reward != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Bandit(dAtA, i, uint32(math.Float32bits(float32(m.Reward))))
	}
	return i, nil
}

func (m *UpdateArmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateArmResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Bandit(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Bandit(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBandit(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Experiment) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBandit(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovBandit(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovBandit(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBandit(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBandit(uint64(l))
	}
	if m.N != 0 {
		n += 1 + sovBandit(uint64(m.N))
	}
	if m.Epsilon != 0 {
		n += 9
	}
	if len(m.Features) > 0 {
		for _, s := range m.Features {
			l = len(s)
			n += 1 + l + sovBandit(uint64(l))
		}
	}
	if len(m.Counts) > 0 {
		l = 0
		for _, e := range m.Counts {
			l += sovBandit(uint64(e))
		}
		n += 1 + sovBandit(uint64(l)) + l
	}
	if len(m.Rewards) > 0 {
		n += 1 + sovBandit(uint64(len(m.Rewards)*8)) + len(m.Rewards)*8
	}
	return n
}

func (m *GetExperimentsRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetExperimentsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovBandit(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovBandit(uint64(m.Count))
	}
	return n
}

func (m *GetExperimentRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBandit(uint64(l))
	}
	return n
}

func (m *GetExperimentResponse) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBandit(uint64(l))
	}
	return n
}

func (m *PostExperimentRequest) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBandit(uint64(l))
	}
	return n
}

func (m *PostExperimentResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBandit(uint64(l))
	}
	return n
}

func (m *DeleteExperimentRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBandit(uint64(l))
	}
	return n
}

func (m *DeleteExperimentResponse) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	return n
}

func (m *GetArmRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBandit(uint64(l))
	}
	return n
}

func (m *GetArmResponse) Size() (n int) {
	var l int
	_ = l
	if m.Arm != 0 {
		n += 1 + sovBandit(uint64(m.Arm))
	}
	return n
}

func (m *UpdateArmRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBandit(uint64(l))
	}
	if m.Arm != 0 {
		n += 1 + sovBandit(uint64(m.Arm))
	}
	if m.Reward != 0 {
		n += 5
	}
	return n
}

func (m *UpdateArmResponse) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	return n
}

func sovBandit(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBandit(x uint64) (n int) {
	return sovBandit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Experiment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Experiment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Experiment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epsilon", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Epsilon = float64(math.Float64frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBandit
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Counts = append(m.Counts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBandit
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBandit
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBandit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Counts = append(m.Counts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
		case 10:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = uint64(dAtA[iNdEx-8])
				v |= uint64(dAtA[iNdEx-7]) << 8
				v |= uint64(dAtA[iNdEx-6]) << 16
				v |= uint64(dAtA[iNdEx-5]) << 24
				v |= uint64(dAtA[iNdEx-4]) << 32
				v |= uint64(dAtA[iNdEx-3]) << 40
				v |= uint64(dAtA[iNdEx-2]) << 48
				v |= uint64(dAtA[iNdEx-1]) << 56
				v2 := float64(math.Float64frombits(v))
				m.Rewards = append(m.Rewards, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBandit
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBandit
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = uint64(dAtA[iNdEx-8])
					v |= uint64(dAtA[iNdEx-7]) << 8
					v |= uint64(dAtA[iNdEx-6]) << 16
					v |= uint64(dAtA[iNdEx-5]) << 24
					v |= uint64(dAtA[iNdEx-4]) << 32
					v |= uint64(dAtA[iNdEx-3]) << 40
					v |= uint64(dAtA[iNdEx-2]) << 48
					v |= uint64(dAtA[iNdEx-1]) << 56
					v2 := float64(math.Float64frombits(v))
					m.Rewards = append(m.Rewards, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBandit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBandit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExperimentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExperimentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExperimentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBandit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBandit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExperimentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExperimentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExperimentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBandit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Experiment{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBandit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBandit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExperimentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExperimentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExperimentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBandit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBandit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExperimentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExperimentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExperimentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBandit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Experiment{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBandit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBandit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostExperimentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostExperimentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostExperimentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBandit
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Experiment{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBandit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBandit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostExperimentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostExperimentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostExperimentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBandit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBandit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteExperimentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteExperimentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteExperimentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBandit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBandit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteExperimentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteExperimentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteExperimentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBandit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBandit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBandit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBandit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arm", wireType)
			}
			m.Arm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arm |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBandit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBandit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateArmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateArmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateArmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBandit
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arm", wireType)
			}
			m.Arm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arm |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Reward = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBandit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBandit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateArmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBandit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateArmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateArmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBandit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBandit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBandit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBandit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBandit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBandit
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBandit
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBandit(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBandit = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBandit   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto/bandit.proto", fileDescriptorBandit) }

var fileDescriptorBandit = []byte{
	// 659 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0x4f, 0x4f, 0xd4, 0x5c,
	0x14, 0xc6, 0xdf, 0xdb, 0xc2, 0xc0, 0x1c, 0x5e, 0x70, 0x38, 0x19, 0x86, 0x4b, 0x85, 0xa1, 0x56,
	0x43, 0xea, 0x24, 0xd2, 0x88, 0x3b, 0x36, 0x06, 0xa2, 0x61, 0xe3, 0xc2, 0xd4, 0xe8, 0xc2, 0x8d,
	0xb9, 0x33, 0xbd, 0x0c, 0x15, 0xa6, 0xb7, 0xf6, 0xde, 0x41, 0x13, 0xe3, 0xc6, 0x85, 0x1b, 0x97,
	0x6e, 0xfc, 0x48, 0x2e, 0x4d, 0xfc, 0x02, 0x06, 0xfd, 0x20, 0xa6, 0xb7, 0x2d, 0x53, 0x6a, 0xab,
	0xee, 0x7a, 0xfe, 0xf4, 0xf7, 0x9c, 0x73, 0xfa, 0x4c, 0x06, 0x30, 0x4e, 0x84, 0x12, 0xde, 0x90,
	0x45, 0x41, 0xa8, 0x76, 0x75, 0x80, 0xad, 0x2c, 0xb2, 0x36, 0xc7, 0x42, 0x8c, 0xcf, 0xb8, 0xc7,
	0xe2, 0xd0, 0x63, 0x51, 0x24, 0x14, 0x53, 0xa1, 0x88, 0x64, 0xd6, 0x65, 0xdd, 0x19, 0x87, 0xea,
	0x64, 0x3a, 0xdc, 0x1d, 0x89, 0x89, 0x37, 0x16, 0x63, 0xe1, 0xe9, 0xf4, 0x70, 0x7a, 0xac, 0xa3,
	0x0c, 0x9b, 0x3e, 0x65, 0xed, 0xce, 0x07, 0x03, 0xe0, 0xe1, 0x9b, 0x98, 0x27, 0xe1, 0x84, 0x47,
	0x0a, 0x57, 0xc0, 0x08, 0x03, 0x4a, 0x6c, 0xe2, 0xb6, 0x7d, 0x23, 0x0c, 0x70, 0x0b, 0x60, 0x94,
	0x70, 0xa6, 0x78, 0xf0, 0x82, 0x29, 0x6a, 0xe8, 0x7c, 0x3b, 0xcf, 0x1c, 0xa8, 0xb4, 0x3c, 0x8d,
	0x83, 0xa2, 0x6c, 0x66, 0xe5, 0x3c, 0x73, 0xa0, 0x10, 0x61, 0x2e, 0x62, 0x13, 0x4e, 0xe7, 0x74,
	0x41, 0x3f, 0xa3, 0x0d, 0x4b, 0x01, 0x97, 0xa3, 0x24, 0x8c, 0xd3, 0xa9, 0xe9, 0xbc, 0x2e, 0x95,
	0x53, 0xf8, 0x3f, 0x90, 0x88, 0xb6, 0x6c, 0xe2, 0x9a, 0x3e, 0x89, 0x90, 0xc2, 0x02, 0x8f, 0x65,
	0x78, 0x26, 0x22, 0xba, 0x60, 0x13, 0x97, 0xf8, 0x45, 0x88, 0x16, 0x2c, 0x1e, 0x73, 0xa6, 0xa6,
	0x09, 0x97, 0x74, 0xd1, 0x36, 0xdd, 0xb6, 0x7f, 0x19, 0x63, 0x0f, 0x5a, 0x23, 0x31, 0x8d, 0x94,
	0xa4, 0x6d, 0xdb, 0x74, 0x4d, 0x3f, 0x8f, 0x52, 0x5a, 0xc2, 0x5f, 0xb3, 0x24, 0x90, 0x14, 0x6c,
	0x33, 0xa5, 0xe5, 0xa1, 0xb3, 0x0e, 0x6b, 0x47, 0x5c, 0xcd, 0x4e, 0x21, 0x7d, 0xfe, 0x6a, 0xca,
	0xa5, 0x72, 0x9e, 0x41, 0xaf, 0x5a, 0x90, 0xb1, 0x88, 0x24, 0xc7, 0x1d, 0x98, 0x0b, 0x98, 0x62,
	0x94, 0xd8, 0xa6, 0xbb, 0xb4, 0x87, 0xbb, 0xf9, 0xd7, 0x9a, 0xb5, 0xfa, 0xba, 0x8e, 0x5d, 0x98,
	0xd7, 0xf2, 0xfa, 0x7e, 0xa6, 0x9f, 0x05, 0xce, 0x0e, 0x74, 0xaf, 0x70, 0x73, 0xbd, 0xea, 0x27,
	0x70, 0xee, 0x57, 0x06, 0xab, 0x91, 0x27, 0x7f, 0x92, 0x4f, 0x01, 0x8f, 0x85, 0xac, 0x51, 0xfa,
	0x57, 0x80, 0x0b, 0xbd, 0x2a, 0x20, 0x1f, 0xa1, 0x3a, 0xeb, 0x6d, 0x58, 0x7f, 0xc0, 0xcf, 0xb8,
	0xe2, 0x7f, 0x5f, 0x6b, 0x00, 0xf4, 0xf7, 0xd6, 0x19, 0x56, 0x9c, 0xea, 0xde, 0x45, 0xdf, 0x10,
	0xa7, 0xce, 0x36, 0x2c, 0x1f, 0x71, 0x75, 0x90, 0x4c, 0x9a, 0x60, 0x0e, 0xac, 0x14, 0x0d, 0x39,
	0xa2, 0x03, 0x26, 0x4b, 0x26, 0xba, 0xc5, 0xf4, 0xd3, 0x47, 0xe7, 0x11, 0x74, 0x9e, 0x6a, 0x67,
	0x36, 0x73, 0x8a, 0xb7, 0x8c, 0xcb, 0xb7, 0x52, 0x23, 0x65, 0x0e, 0xd1, 0xee, 0x36, 0xfc, 0x3c,
	0x72, 0x6e, 0xc2, 0x6a, 0x89, 0x56, 0x3f, 0xf7, 0xde, 0xc7, 0x79, 0x58, 0x3e, 0xd4, 0x47, 0x7d,
	0xc2, 0x93, 0xf3, 0x70, 0xc4, 0xf1, 0x44, 0x0f, 0x5a, 0x32, 0x13, 0x6e, 0x15, 0x67, 0xaf, 0x75,
	0x9f, 0xd5, 0x6f, 0x2a, 0x67, 0x92, 0xce, 0xfa, 0xfb, 0x6f, 0x3f, 0x3f, 0x19, 0xab, 0x78, 0xcd,
	0x3b, 0xbf, 0xeb, 0xf1, 0x12, 0xf7, 0xa5, 0xbe, 0x59, 0xe9, 0xa7, 0xbd, 0x59, 0x4b, 0x2a, 0x74,
	0xb6, 0x1a, 0xaa, 0xb9, 0xcc, 0xa6, 0x96, 0xe9, 0x61, 0xb7, 0x22, 0xe3, 0xbd, 0x0d, 0x83, 0x77,
	0x78, 0x0a, 0x2b, 0x57, 0x0d, 0x32, 0xdb, 0xaa, 0xd6, 0x79, 0xb3, 0xad, 0xea, 0x7d, 0xe5, 0x58,
	0x5a, 0xae, 0xeb, 0x54, 0xb7, 0xda, 0x27, 0x03, 0x94, 0xd0, 0xa9, 0x1a, 0x07, 0xb7, 0x0b, 0x5e,
	0x83, 0xfb, 0x2c, 0xbb, 0xb9, 0xe1, 0xea, 0x86, 0x83, 0xfa, 0x0d, 0x9f, 0x43, 0x2b, 0x33, 0x18,
	0xae, 0x95, 0x0e, 0x35, 0x73, 0x92, 0xd5, 0xab, 0xa6, 0x73, 0xec, 0x0d, 0x8d, 0xbd, 0x8e, 0x1b,
	0x75, 0x58, 0x8f, 0x25, 0x13, 0x89, 0xc7, 0xd0, 0xbe, 0xb4, 0x12, 0xd2, 0x82, 0x53, 0xf5, 0xaa,
	0xb5, 0x51, 0x53, 0xc9, 0x45, 0x6e, 0x69, 0x91, 0xfe, 0x5e, 0xb3, 0xc8, 0x3e, 0x19, 0x1c, 0x76,
	0xbe, 0x5c, 0xf4, 0xc9, 0xd7, 0x8b, 0x3e, 0xf9, 0x7e, 0xd1, 0x27, 0x9f, 0x7f, 0xf4, 0xff, 0x1b,
	0xb6, 0xf4, 0x7f, 0xc0, 0xbd, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x3a, 0x28, 0x0b, 0x6e,
	0x06, 0x00, 0x00,
}
